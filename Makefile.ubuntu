MAKEFLAGS += --warn-undefined-variables

CMAKE_COMMAND_LINE_DEBUG_FLAGS=# --trace --debug-output --trace-expand

BUILD_DIR_NINJA?=$(PWD)/BuildNinja

MULL_CMAKE_TOOLCHAIN?=$(PWD)/Mull.toolchain.ubuntu.cmake

MULL_UNITTESTS_DIR=$(BUILD_DIR_NINJA)/unittests
MULL=$(MULL_UNITTESTS_DIR)/MullUnitTests

# Self-Documented Makefile
# http://marmelab.com/blog/2016/02/29/auto-documented-makefile.html
.PHONY: help
help: ## Show this help message.
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

test: test_unit

test_unit: build_ninja ## Run Unit Tests (Builds Ninja cache first if it does not exist)
	cd $(BUILD_DIR_NINJA) && ninja MullUnitTests

	# TODO: A common but dirty solution, people should learn about rpath
	# http://stackoverflow.com/a/12399085/598057
	cd $(MULL_UNITTESTS_DIR) && LD_LIBRARY_PATH=$(BUILD_DIR_NINJA)/lib $(MULL)


.PHONY: build_ninja

build_ninja: ## Build Ninja project with CMake.
	mkdir -p $(BUILD_DIR_NINJA)

	rm -rfv $(BUILD_DIR_NINJA)/CMakeCache.txt
	cd $(BUILD_DIR_NINJA) && cmake ../ -G Ninja \
	  $(CMAKE_COMMAND_LINE_DEBUG_FLAGS) \
          -DCMAKE_TOOLCHAIN_FILE=$(MULL_CMAKE_TOOLCHAIN) \

build_ninja_mull: build_ninja ## Build Mull target
	cd $(BUILD_DIR_NINJA) && ninja mull

clean: clean_ninja ## Delete CMake build caches: Xcode and Ninja.

clean_ninja: ## Delete Ninja CMake build cache.
	rm -rfv $(BUILD_DIR_NINJA)

