MAKEFLAGS += --warn-undefined-variables

CMAKE_COMMAND_LINE_DEBUG_FLAGS=# --trace --debug-output --trace-expand

MULL_CC=/usr/lib/llvm-3.9/bin/clang

BUILD_DIR_NINJA?=$(PWD)/BuildNinja

MULL_CMAKE_TOOLCHAIN?=$(PWD)/Mull.toolchain.ubuntu.cmake

MULL_UNITTESTS_DIR=$(BUILD_DIR_NINJA)/unittests
MULL=$(MULL_UNITTESTS_DIR)/MullUnitTests

# Self-Documented Makefile
# http://marmelab.com/blog/2016/02/29/auto-documented-makefile.html
.PHONY: help
help: ## Show this help message.
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

install: build_ninja
	cd $(BUILD_DIR_NINJA) && ninja install

generate_fixtures: ## Generates fixtures for tests
	cd lab && make synchronize_fixtures

test: generate_fixtures test_unit

test_unit: build_ninja ## Run Unit Tests (Builds Ninja cache first if it does not exist)
	cd $(BUILD_DIR_NINJA) && ninja MullUnitTests

	# TODO: A common but dirty solution, people should learn about rpath
	# http://stackoverflow.com/a/12399085/598057
	cd $(MULL_UNITTESTS_DIR) && LD_LIBRARY_PATH=$(BUILD_DIR_NINJA)/lib $(MULL)

example: build_ninja_driver
	cd Examples/HelloWorld && make example MULL=$(BUILD_DIR_NINJA)/tools/driver/mull-driver MULL_CC=$(MULL_CC)

example_run: build_ninja_driver
	cd Examples/HelloWorld && make run MULL=$(BUILD_DIR_NINJA)/tools/driver/mull-driver MULL_CC=$(MULL_CC)

travis: test #example

travis_install:
	sudo apt-get update
	sudo apt-get -y install wget
	echo "deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-3.9 main" | sudo tee /etc/apt/sources.list.d/llvm.list > /dev/null
	sudo wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
	sudo apt-get update
	sudo apt-get -y install git cmake make vim ninja-build wget \
                     libz-dev sqlite3 libsqlite3-dev ncurses-dev \
                     llvm-3.9 clang-3.9 llvm-3.9-dev libclang-3.9-dev \
                     binutils-2.26
	ld --version
	sudo update-alternatives --install /usr/bin/ld ld /usr/bin/ld-2.26 1
	ld --version

.PHONY: build_ninja

build_ninja: ## Build Ninja project with CMake.
	mkdir -p $(BUILD_DIR_NINJA)

	rm -rfv $(BUILD_DIR_NINJA)/CMakeCache.txt
	cd $(BUILD_DIR_NINJA) && cmake ../ -G Ninja \
	  $(CMAKE_COMMAND_LINE_DEBUG_FLAGS) \
          -DCMAKE_TOOLCHAIN_FILE=$(MULL_CMAKE_TOOLCHAIN) \

build_ninja_mull: build_ninja ## Build Mull target
	cd $(BUILD_DIR_NINJA) && ninja mull

build_ninja_driver: build_ninja ## Build mull-driver target
	cd $(BUILD_DIR_NINJA) && ninja mull-driver

clean: clean_ninja ## Delete CMake build caches: Xcode and Ninja.
	cd lab && make clean

clean_ninja: ## Delete Ninja CMake build cache.
	rm -rfv $(BUILD_DIR_NINJA)

